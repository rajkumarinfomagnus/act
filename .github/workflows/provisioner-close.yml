name: Repository - Update

on:
  pull_request:
    types:
      - closed
      
jobs:
  create-modify-repository:
    runs-on: ubuntu-latest

    outputs:
      Create_repoID: ${{ steps.create-repo.outputs.create_repoID }}
      Modify_repoID: ${{ steps.modify-repo.outputs.modify_repoID }}
      Create_OrgID: ${{ steps.create_enterprise_organization.outputs.organization_created }}
      Modify_OrgID: ${{ steps.update_enterprise_organization.outputs.organization_updated }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2    

      - name: Extract issue.json data
        run: echo "ISSUE_JSON=$(cat ./extracted-data.json | jq -c .)" >> $GITHUB_ENV

      - name: Extract issue number from PR title or body
        id: extract-issue-number
        run: |
          #Extract issue number from the PR title or body
          issue_number=$(echo "${{ github.event.pull_request.title }}" | grep -oP 'Automated #\d+' | grep -oP '\d+')
          if [ -z "$issue_number" ]; then
            echo "No issue reference found in the PR title. Checking PR body..."
            issue_number=$(echo "${{ github.event.pull_request.body }}" | grep -oP 'Automated #\d+' | grep -oP '\d+')
          fi 
          echo "::set-output name=issue_number::$issue_number"          
          
      - name: Get Issue labels
        id: get-issue-labels
        uses: ./provisioner/actions/get-all-labels-issue
        with:
          USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
          ORG_NAME: ${{ github.event.organization.login }}
          REPO_NAME: ${{ github.event.repository.name }}
          ISSUE_NUMBER: ${{ steps.extract-issue-number.outputs.issue_number }}

      - name: Check issue labels
        id: check-issue-labels
        run: | 
           issue_labels_string_base64="${{ steps.get-issue-labels.outputs.LABEL_RESPONSE }}"
            issue_labels_string=$(echo "$issue_labels_string_base64" | base64 --decode)
            echo "issue_labels_string: $issue_labels_string"
            declare -a issue_labels

            while IFS= read -r line; do
              issue_labels+=("$line")
            done < <(echo "$issue_labels_string" | jq -r '.[]')

            for label in "${issue_labels[@]}"; do
              if [[ "$label" == "NewRepository" ]]; then
                echo "1"
                echo "create_modify_repo=NewRepository" >> $GITHUB_OUTPUT
              elif [[ "$label" == "ModifyRepository" ]]; then
                echo "2"
                echo "create_modify_repo=ModifyRepository" >> $GITHUB_OUTPUT
              fi
              
              if [[ "$label" == "NewOrganization" ]]; then
                echo "3"
                echo "create_modify_org=NewOrganization" >> $GITHUB_OUTPUT
              elif [[ "$label" == "ModifyOrganization" ]]; then 
                echo "4"
                echo "create_modify_org=ModifyOrganization" >> $GITHUB_OUTPUT
              fi   
            done   

      - name: create-enterprise-organization
        if: steps.check-issue-labels.outputs.create_modify_org == 'NewOrganization'
        uses: ./provisioner/actions/create-organization-at-enterprise-level
        id: create_enterprise_organization
        with:
            USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
            HOSTNAME: ${{ vars.hostname }}
            ORG_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
            PROFILE_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
            ADMIN: ${{ github.actor }}
            BILLING_EMAIL: ${{ fromJson(env.ISSUE_JSON).billing_email }}
        env:
            ISSUE_JSON: ${{ env.ISSUE_JSON }}    

      - name: update-enterprise-organization
        if: steps.check-issue-labels.outputs.create_modify_org == 'ModifyOrganization'
        uses: ./provisioner/actions/update-organization
        id: update_enterprise_organization
        with:
          USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
          ORG_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
          HOSTNAME: ${{ vars.hostname }}
          BILLING_EMAIL: ${{ fromJson(env.ISSUE_JSON).billing_email }}                  
          DEFAULT_REPOSITORY_PERMISSION: ${{ fromJson(env.ISSUE_JSON).default_repository_permission }}
          MEMBERS_CAN_CREATE_REPOSITORIES: ${{ fromJson(env.ISSUE_JSON).members_can_create_repositories }}
          MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE: ${{ fromJson(env.ISSUE_JSON).default_repository_visibility }}               
       
        env:
          ISSUE_JSON: ${{ env.ISSUE_JSON }}              

      - name: Create Repository
        if: steps.check-issue-labels.outputs.create_modify_repo == 'NewRepository'
        id: create-repo
        uses: ./provisioner/actions/create-repo-ghec   
        with:
           USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
           ORG_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
           REPO_NAME: ${{ fromJson(env.ISSUE_JSON).repository.name }}
           DESCRIPTION: ${{ fromJson(env.ISSUE_JSON).repository.description }}
           HOME_PAGE: ${{ fromJson(env.ISSUE_JSON).repository.homepage }}
           HOST_NAME: ${{ fromJson(env.ISSUE_JSON).repository.host-name }}
           HAS_WIKI: ${{ fromJson(env.ISSUE_JSON).repository.has_wiki }}
           HAS_PROJECTS: ${{ fromJson(env.ISSUE_JSON).repository.has_projects }}
           HAS_ISSUES: ${{ fromJson(env.ISSUE_JSON).repository.has_issues }}  
           HAS_DISCUSSIONS: ${{ fromJson(env.ISSUE_JSON).repository.has_discussions }}
           ALLOW_SQUASH_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.allow_squash_merge }}
           ALLOW_MERGE_COMMIT: ${{ fromJson(env.ISSUE_JSON).repository.allow_merge_commit }}
           ALLOW_REBASE_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.allow_rebase_merge }}
           ALLOW_AUTO_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.allow_auto_merge }}
           DELETE_BRANCH_ON_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.delete_branch_on_merge }}
        env:
          ISSUE_JSON: ${{ env.ISSUE_JSON }}  
          
      - name: Modify Repository
        if: steps.check-issue-labels.outputs.create_modify_repo == 'ModifyRepository'
        id: modify-repo
        uses: ./provisioner/actions/update-repo-ghec
        with:
          USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
          ORG_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
          REPO_NAME: ${{ fromJson(env.ISSUE_JSON).repository.name }}
          HOME_PAGE: ${{ fromJson(env.ISSUE_JSON).repository.homepage }}
          DESCRIPTION: ${{ fromJson(env.ISSUE_JSON).repository.description }}
          HAS_WIKI: ${{ fromJson(env.ISSUE_JSON).repository.has_wiki }}
          HAS_PROJECTS: ${{ fromJson(env.ISSUE_JSON).repository.has_projects }}
          HAS_ISSUES: ${{ fromJson(env.ISSUE_JSON).repository.has_issues }}  
          HAS_DISCUSSIONS: ${{ fromJson(env.ISSUE_JSON).repository.has_discussions }}
          ALLOW_SQUASH_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.allow_squash_merge }}
          ALLOW_MERGE_COMMIT: ${{ fromJson(env.ISSUE_JSON).repository.allow_merge_commit }}
          ALLOW_REBASE_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.allow_rebase_merge }}
          ALLOW_AUTO_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.allow_auto_merge }}
          DELETE_BRANCH_ON_MERGE: ${{ fromJson(env.ISSUE_JSON).repository.delete_branch_on_merge }}
        env:
          ISSUE_JSON: ${{ env.ISSUE_JSON }}    
                
      - name: Add or Update labels
        if: ${{ fromJson(env.ISSUE_JSON).repository.labelName != null && fromJson(env.ISSUE_JSON).repository.labelName != '' }}
        uses: ./provisioner/actions/add-update-labels
        id: add-update-labels
        with:
          USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
          ORG_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
          REPO_NAME: ${{ fromJson(env.ISSUE_JSON).repository.name }}
          LABEL_NAME: ${{ fromJson(env.ISSUE_JSON).repository.labelName }}              
        env:
          ISSUE_JSON: ${{ env.ISSUE_JSON }}

      - name: Add or Update Topics
        if: ${{ fromJson(env.ISSUE_JSON).repository.topics != null && fromJson(env.ISSUE_JSON).repository.topics != '' }}
        uses: ./provisioner/actions/add-update-topics-to-repo   
        id: add-update-topics-to-repo
        with:
          USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
          ORG_NAME: ${{ fromJson(env.ISSUE_JSON).org_name }}
          REPO_NAME: ${{ fromJson(env.ISSUE_JSON).repository.name }}
          TOPICS: ${{ fromJson(env.ISSUE_JSON).repository.topics }}
        env:
          ISSUE_JSON: ${{ env.ISSUE_JSON }}

      
      - name: Conditional Step        
        run: |            
          issue_number="${{ steps.extract-issue-number.outputs.issue_number }}"
          if [ -n "$issue_number" ]; then
            echo "Closing issue #${issue_number}"
            curl -X POST -H "Authorization: token ${{ secrets.ISSUE_OPS_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/comments" -d '{"body":"This issue has been closed by merging the associated pull request."}'
            curl -X PATCH -H "Authorization: token ${{ secrets.ISSUE_OPS_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number" -d '{"state":"closed"}'
          else
            echo "No issue reference found in the PR title or body."
          fi    
  

      - name: Get Issue Comment
        id: get-issue-comment       
        run: | 
          issue_number="${{ steps.extract-issue-number.outputs.issue_number }}"   
          issue_comment=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ISSUE_OPS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.event.organization.login }}/${{ github.event.repository.name }}/issues/$issue_number/comments)
              
            echo $issue_comment       
        
            # Extract the "body" attributes from the JSON data and format them as a newline-separated list
            body_list=$(echo "$issue_comment" | jq -r '.[].body' | tr '\n' '\n')

            # Use grep to search for "Branch:" details in the list
            branches=$(echo "$body_list" | grep -oP 'Branch:\s+\K\S+')

            # Print the extracted branch details
            echo "::set-output name=branch_name::$branches"

      - name: Delete Branch        
        id: delete-branch
        uses: ./provisioner/actions/delete-branch
        with:
          USER_PAT: ${{ secrets.ISSUE_OPS_TOKEN }}
          MAIN_BRANCH: 202-store-the-settings
          BRANCH_NAME: ${{ steps.get-issue-comment.outputs.branch_name }}

  
  Output:
    needs: create-modify-repository
    runs-on: ubuntu-latest
    steps:
    - name: Print output  
      run: |
        echo "Create_repoID: ${{ needs.create-modify-repository.outputs.Create_repoID }}"
        echo "Modify_repoID: ${{ needs.create-modify-repository.outputs.Modify_repoID }}"
        echo "Create_OrgID: ${{ needs.create-modify-repository.outputs.Create_OrgID }}"
        echo "Modify_OrgID: ${{ needs.create-modify-repository.outputs.Modify_OrgID }}"
