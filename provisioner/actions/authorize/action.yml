name: |
  Repository Creation: Authorize
description: |
  Action used to authorize issue-ops requests around creating GitHub repositories.
inputs:
  authentication:
    description: Method to authenticate client; either 'app' or 'token'
    required: true
  application-id:
    description: Application ID of GitHub App, used if `authentication` is 'app'
    required: false
  application-private-key:
    description: Private SSH key of GitHub App, used if `authentication` is 'app'
    required: false
  github-token:
    description: GitHub token, used if `authentication` is 'token'
    required: false
  # team-assign:
  #   description: GitHub team slug for assigning issue
  #   required: true
runs:
  using: composite
  steps:
    - name: Authenticate
      id: authenticate
      uses: ./provisioner/actions/temp/authenticate
      with:
        authentication: ${{ inputs.authentication }}
        application-id: ${{ inputs.application-id }}
        application-private-key: ${{ inputs.application-private-key }}
        github-token: ${{ inputs.github-token }}

    # - name: Acknowledge
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ steps.authenticate.outputs.token }}
    #     script: |
    #       const jsonPretty = JSON.stringify(context.payload, null, 2)
    #       const body = `
    #       @${context.actor} : Sounds good!  Let me process a few details so this is knocked out immediately.

    #       <details>
    #         <summary>GitHub Event Payload</summary>

    #         \`\`\`json
    #         ${jsonPretty}
    #         \`\`\`
    #       </details>
    #       `

    #       github.rest.issues.createComment({
    #         ...context.repo,
    #         issue_number: context.issue.number,
    #         body
    #       })


    # - name: Lookup approver
    #   id: lookup-approver
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ steps.authenticate.outputs.token }}
    #     script: |
    #       return await github.rest.teams.getMembershipForUserInOrg({
    #         org: context.repo.owner,
    #         team_slug: process.env.LGTM_TEAM,
    #         username: context.actor,
    #       })

    # - name: Verify lookup approver results
    #   uses: actions/github-script@v6
    #   env:
    #     LOOKUP_APPROVER_JSON: ${{ steps.lookup-approver.outputs.result }}
    #   with:
    #     github-token: ${{ steps.authenticate.outputs.token }}
    #     script: |
    #       const response = JSON.parse(process.env.LOOKUP_APPROVER_JSON)
    #       const jsonPretty = JSON.stringify(response, null, 2)

    #       const body = `
    #       @${context.actor} : Verifying whether you're authorized to approve these requests.

    #       <details>
    #         <summary>Lookup Approver Response</summary>

    #         \`\`\`json
    #         ${jsonPretty}
    #         \`\`\`
    #       </details>
    #       `

    #       github.rest.issues.createComment({
    #         ...context.repo,
    #         issue_number: context.issue.number,
    #         body
    #       })

    #       if (response.status != 200) {
    #         core.setFailed(`${context.actor} is either not authorized to approve request or something went wrong.`)
    #       }

    # - name: Handle lookup approver failure
    #   if: ${{ failure() }}
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ steps.authenticate.outputs.token }}
    #     script: |
    #       const body = `
    #       @${context.actor} : Unfortunately, it appears you are not not authorized to approve requests or something went wrong.
    #       `

    #       github.rest.issues.createComment({
    #         ...context.repo,
    #         issue_number: context.issue.number,
    #         body
    #       })